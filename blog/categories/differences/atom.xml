<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Differences | Simple Problems]]></title>
  <link href="http://navyapothineni.github.io/blog/categories/differences/atom.xml" rel="self"/>
  <link href="http://navyapothineni.github.io/"/>
  <updated>2017-07-27T21:47:42-07:00</updated>
  <id>http://navyapothineni.github.io/</id>
  <author>
    <name><![CDATA[Navya Pothineni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A C Programmer's Guide to Python]]></title>
    <link href="http://navyapothineni.github.io/blog/2017/07/27/a-c-programmers-guide-to-python/"/>
    <updated>2017-07-27T21:23:13-07:00</updated>
    <id>http://navyapothineni.github.io/blog/2017/07/27/a-c-programmers-guide-to-python</id>
    <content type="html"><![CDATA[<p>With Codecademy’s Python boot camp as my only previous experience with Python, I started working for <a href="https://www.odrive.com/">odrive</a> in June. Our sync engine is written in Python. This is the magic code that helps keep local files in sync with the remote files on their respective cloud platforms and I now happen to be a part of the sync team.</p>

<p>Some of the things you have probably heard about Python are that it is a general purpose, high level (reads like English), flexible, and a dynamically typed language. In essence, not only is it excellent for beginners who are learning to program, but it is also increasingly becoming the choice of language for software developers. Python was also recently ranked <a href="http://spectrum.ieee.org/computing/software/the-2017-top-programming-languages">1st</a> among programming languages by IEEE.</p>

<p>Having worked mostly with statically typed programming languages, I particularly enjoy the freedom of dynamic typing in Python. So far, writing code without a care in the world for memory leaks, corruptions, and the looming dread of segmentation faults, has been as pleasant as the colder side of a pillow.
Dynamic Typing: If you have used JavaScript, GO or Objective-C, you are probably familiar with this concept. It is to say that every variable is bound to an object instead of a type.</p>

<pre><code>int a = 0;  // this can only be an int

vs

a = "this_could_be_a_string"
a = 0  # or an integer
</code></pre>

<p>Interpreted Language: Python is an interpreted language, in contrast to C/C++ which needs explicit compiling before executing the program. Although compiled programs run faster than interpreted programs, so far the only thing I have come to miss is the excuse to browse Reddit while I wait for my code to compile.</p>

<p>An IDE like PyCharm is helpful with Python to spot problems that a compiler would help spot. The absence of code compilation has made me more introspective about coding errors I make that are blaringly pointed out by the compiler. Instead of spending more time debugging over simple mistakes, I have, as a result, become more careful when writing code to avoid obvious mistakes - like double checking members of a class exist before I access them. Perhaps, this can be improved by a logging system to watch for trends and cut down time systematically with a well organized checklist.</p>

<p>Readability: This has to be my favorite part about Python. A hard truth about programming that I have come to observe is as Robert C. Martin says in his book, Clean Code.</p>

<p>“.. the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …[Therefore,] making it easy to read makes it easier to write.”</p>

<p>Python emphasizes on concise, readable code as opposed to having fine grain control over the smallest units of memory in case of C.</p>

<p>Libraries Galore: Easily extend Python with useful modules, libraries and packages. Find a commonly used list <a href="https://wiki.python.org/moin/UsefulModules">here</a>.</p>

<p>Although I sometimes instinctively find the need to declare functions before using them, working with Python has been absolutely fun.
If you are just getting started with Python and want to take a look at the coding practices, find a helpful guide <a href="https://www.python.org/dev/peps/pep-0008/">here</a>. A wiki about standard libraries <a href="https://docs.python.org/2/library/index.html">here</a> and just for kicks, look into why NASA uses Python <a href="https://www.python.org/about/success/usa/">here</a>.</p>
]]></content>
  </entry>
  
</feed>
