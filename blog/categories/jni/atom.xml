<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jni | Simple Problems]]></title>
  <link href="http://navyapothineni.github.io/blog/categories/jni/atom.xml" rel="self"/>
  <link href="http://navyapothineni.github.io/"/>
  <updated>2017-04-27T16:56:42-07:00</updated>
  <id>http://navyapothineni.github.io/</id>
  <author>
    <name><![CDATA[Navya Pothineni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using the Android Studio Experimental Plugin]]></title>
    <link href="http://navyapothineni.github.io/blog/2017/04/27/using-the-android-studio-experimental-plugin/"/>
    <updated>2017-04-27T13:27:40-07:00</updated>
    <id>http://navyapothineni.github.io/blog/2017/04/27/using-the-android-studio-experimental-plugin</id>
    <content type="html"><![CDATA[<p>Android Studio&rsquo;s experimental plugin allows you to develop JNI applications and helps with NDK integrations. The default location for your C/C++ code, including headers is /src/main/jni. You will also need an Android Make file Android.mk file under the same directory. If your C code uses its own libraries in turn, copy them into jniLibs under main into the folder of your architecture(arm64-v8a/mips/..).</p>

<p>You will also need to add the ndk block in your build.gradle file.</p>

<pre><code> ndk{
            moduleName "test-jni"
    }
</code></pre>

<p>The Android.mk file is a simple Makefile for your C/C++ code. The build system takes care of some details; you don&rsquo;t have to explicitly specify the header files or include paths like in a GNU Makefile. If you want to use the JNI code as a library as you would in case of NDK projects, your Makefile will looks as follows.</p>

<pre><code>LOCAL_PATH := $(call my-dir) #my-dir is a macro function that returns the current dir
TARGET_PLATFORM := android-23 #sdk version
include $(CLEAR_VARS) #CLEAR_VARS is a GNU Makefile that helps the build system clear all LOCAL_XXX variables

LOCAL_MODULE := test-jni #name your module -- should be same in your build.gradle file
#src
OBJS = main.c
OBJS += abc.c
OBJS += def.c
OBJS += ghi.c
OBJS += jkl.c

#cflags
CFLAGS = -Wall -v

#ldflags
LDFLAGS =  -L$(LOCAL_PATH) libmyown.so -L$(LOCAL_PATH) libtest.so 

#includes
INCLUDES += \
               $(LOCAL_PATH) other/source/folders/include/ \

#shared libs
HL_SHARED_LIB =

#Android mk releated
LOCAL_SRC_FILES := $(OBJS)
LOCAL_CFLAGS := $(CFLAGS)
LOCAL_CFLAGS := $(CFLAGS)
LOCAL_LDLIBS := $(LDFLAGS)
LOCAL_C_INCLUDES := $(INCLUDES)

#USE ONLY ONE OF THESE PER MODULE
include $(BUILD_EXECUTABLE) #If you want to build a standalone executable
include $(BUILD_SHARED_LIBRARY) #If you want to build a shared library
</code></pre>

<p>And then you are ready to build the source. You can also use the ndk-build command in your jni folder on command line or use the Build option in Android Studio.</p>

<p>Using asynchronous method calls in the JNI bridge is also an interesting problem. I found <a href="http://adamish.com/blog/archives/327">this</a> very helpful.</p>
]]></content>
  </entry>
  
</feed>
